# Generated by Django 5.2.7 on 2025-10-12 21:31

from django.db import migrations


def create_default_groups(apps, schema_editor):
    """Create default permission groups for the system"""
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    # Get content types for our models
    try:
        device_ct = ContentType.objects.get(app_label='device', model='device')
        employee_ct = ContentType.objects.get(app_label='employees', model='employee')
        attendance_ct = ContentType.objects.get(app_label='attendance', model='attendanceevent')
    except ContentType.DoesNotExist:
        # Content types don't exist yet, skip migration
        return

    # Get or skip if permissions don't exist yet
    try:
        device_section_perm = Permission.objects.get(codename='view_device_section', content_type=device_ct)
        manage_devices_perm = Permission.objects.get(codename='manage_devices', content_type=device_ct)

        employee_section_perm = Permission.objects.get(codename='view_employee_section', content_type=employee_ct)
        manage_employees_perm = Permission.objects.get(codename='manage_employees', content_type=employee_ct)
        manage_fingerprints_perm = Permission.objects.get(codename='manage_fingerprints', content_type=employee_ct)

        attendance_section_perm = Permission.objects.get(codename='view_attendance_section', content_type=attendance_ct)
        manage_attendance_perm = Permission.objects.get(codename='manage_attendance', content_type=attendance_ct)
        download_attendance_perm = Permission.objects.get(codename='download_attendance', content_type=attendance_ct)
    except Permission.DoesNotExist:
        # Permissions don't exist yet, skip migration
        return

    # 1. Administrators Group - Full access to everything
    admin_group, created = Group.objects.get_or_create(name='Administrators')
    if created:
        admin_group.permissions.add(
            device_section_perm, manage_devices_perm,
            employee_section_perm, manage_employees_perm, manage_fingerprints_perm,
            attendance_section_perm, manage_attendance_perm, download_attendance_perm,
        )

    # 2. HR Managers - Full access to employees and attendance, view-only devices
    hr_group, created = Group.objects.get_or_create(name='HR Managers')
    if created:
        hr_group.permissions.add(
            device_section_perm,  # View devices only
            employee_section_perm, manage_employees_perm, manage_fingerprints_perm,
            attendance_section_perm, manage_attendance_perm, download_attendance_perm,
        )

    # 3. Device Managers - Full access to devices, view-only employees
    device_manager_group, created = Group.objects.get_or_create(name='Device Managers')
    if created:
        device_manager_group.permissions.add(
            device_section_perm, manage_devices_perm,
            employee_section_perm,  # View employees only
            attendance_section_perm,  # View attendance only
        )

    # 4. Attendance Operators - Can download attendance and view employees
    attendance_operator_group, created = Group.objects.get_or_create(name='Attendance Operators')
    if created:
        attendance_operator_group.permissions.add(
            employee_section_perm,  # View employees
            attendance_section_perm, download_attendance_perm,
        )

    # 5. Viewers - Read-only access to all sections
    viewer_group, created = Group.objects.get_or_create(name='Viewers')
    if created:
        viewer_group.permissions.add(
            device_section_perm,
            employee_section_perm,
            attendance_section_perm,
        )


def remove_default_groups(apps, schema_editor):
    """Remove default groups on migration rollback"""
    Group = apps.get_model('auth', 'Group')

    group_names = [
        'Administrators',
        'HR Managers',
        'Device Managers',
        'Attendance Operators',
        'Viewers',
    ]

    Group.objects.filter(name__in=group_names).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('device', '0004_alter_device_options'),
        ('employees', '0003_alter_employee_options'),
        ('attendance', '0002_alter_attendanceevent_options'),
    ]

    operations = [
        migrations.RunPython(create_default_groups, remove_default_groups),
    ]
